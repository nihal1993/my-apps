{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCordinates","Math","floor","random","initialState","speed","food","direction","scorecard","myscore","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkBorder","snakeCollapsed","snakeEatingFood","border","gameOver","alert","snake","pop","snakeLenght","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","Snake","Food","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fffef3c0.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => {\n\treturn (\n\t\t<div>\n\t\t\t{props.snakeDots.map((dot, i) => {\n\t\t\t\tconst style = {\n\t\t\t\t\tleft :`${dot[0]}%`,\n\t\t\t\t\ttop  :`${dot[1]}%`\n\t\t\t\t}\n\t\t\t\n\t\t\t\treturn(\n\t\t\t\t\t\t<div className=\"snake-dot\" key={i} style={style}></div>\n\t\t\t\t\t\t\n\t\t\t\t\t)\n\t\t\t})}\n\t\t\t\n\t\t</div>\n\t\t)\n}","import React from 'react';\n\nexport default (props)=>{\n\t\t\n\tconst style = {\n\t\t\t left :`${props.dot[0]}%`,\n\t\t\t top  :`${props.dot[1]}%`\n\t\t}\t\n\n\treturn (\n\t\t<div className=\"snake-food\" style={style}></div>\n\t\t\n\t\t)\n}","import React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\n\n\nconst getRandomCordinates = () => {\n      let min = 1 ;\n      let max = 98 ;\n      let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n      let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n      \n      return [x,y]\n  }\n  \n\n const startGame = (props) => {\n    window.location.reload();\n  } \n\nconst initialState  = {\n     speed:200,\n     food: getRandomCordinates(),\n     direction:'RIGHT',\n     snakeDots: [\n      [0,0],\n      [2,0]\n     ],\n     scorecard:'NONE',\n     myscore:0\n}  \n\nclass App extends Component {\n\n  \n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake,this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate(){\n    this.checkBorder();\n    this.snakeCollapsed();\n    this.snakeEatingFood();\n    \n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch(e.keyCode){\n      case 37:\n      this.setState({direction:'LEFT'});\n      break;\n      case 38:\n      this.setState({direction:'TOP'});\n      break;\n      case 39:\n      this.setState({direction:'RIGHT'});\n      break;\n      case 40:\n      this.setState({direction:'DOWN'});\n      break;\n\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch(this.state.direction){\n      case 'RIGHT':\n      head = [head[0] + 2,head[1]];\n      break;\n      case 'LEFT':\n      head = [head[0] - 2,head[1]];\n      break;\n      case 'TOP':\n      head = [head[0],head[1] -2 ];\n      break;\n      case 'DOWN':\n      head = [head[0],head[1] + 2];\n      break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots:dots\n    })\n\n  }\n\n  checkBorder(){\n    let border = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if(border[0]>100|| border[1]>100 || border[0]< 0 || border[1] < 0){\n      this.gameOver();\n    }\n\n  }\n\n  gameOver(){\n    alert(`Game Over. you scored ${this.state.snakeDots.length}`);\n    this.setState(initialState);\n  }\n\n  snakeCollapsed(){\n    let snake = [...this.state.snakeDots];\n    let head  = snake[snake.length - 1];\n    let sanketurn = snake[snake.length - 2];\n    let i = 0 ;\n    \n    snake.pop();\n    let snakeLenght = snake.length;\n    snake.forEach(dots => {\n        i = i+1;\n        if(snake){\n          \n        if(dots[0] == head[0] && dots[1] == head[1])\n        {\n          let j =i+1;\n          if(j  != snakeLenght){\n          this.gameOver();\n        }}}\n    })\n  }\n\n  snakeEatingFood(){\n    let ed = [...this.state.snakeDots];\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food =  this.state.food;\n    if(food[0] == head[0] && food[1] == head[1]){\n      \n\n\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    \n\n\n    this.setState({\n      snakeDots: newSnake\n    })\n\n    this.setState({\n        food: getRandomCordinates()\n      })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n \n\n  render() {\n      const score = this.state.scorecard;\n\n        return(\n            <div className=\"game-area\">\n             \n                    <Snake snakeDots={this.state.snakeDots} />\n                    <Food dot={this.state.food} />\n                    \n               \n            </div>\n          \n      );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}